{"/home/travis/build/npmtest/node-npmtest-node-tweet-stream/test.js":"/* istanbul instrument in package npmtest_node_tweet_stream */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-tweet-stream/lib.npmtest_node_tweet_stream.js":"/* istanbul instrument in package npmtest_node_tweet_stream */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_node_tweet_stream = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_node_tweet_stream = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-node-tweet-stream/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-node-tweet-stream && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_node_tweet_stream */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_node_tweet_stream\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_node_tweet_stream.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_node_tweet_stream.rollup.js'] =\n            local.assetsDict['/assets.npmtest_node_tweet_stream.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_node_tweet_stream.__dirname + '/lib.npmtest_node_tweet_stream.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-tweet-stream/node_modules/node-tweet-stream/index.js":"module.exports = require('./lib/twitter')\n","/home/travis/build/npmtest/node-npmtest-node-tweet-stream/node_modules/node-tweet-stream/lib/twitter.js":"var request = require('request')\n  , split = require('split')\n  , Writable = require('stream').Writable\n  , util = require('util')\n\nfunction backoff (current, max, step, _value) {\n  return function () {\n    if ((_value = current) > max) {\n      throw new Error('Exceeded twitter rate limit')\n    }\n    current = step(current)\n    return _value\n  }\n\n}\n\nvar FILTER_TYPE_TRACKING = 'tracking'\n  , FILTER_TYPE_LOCATION = 'location'\n  , FILTER_TYPE_FOLLOW = 'follow'\n  , FILTER_TYPE_LANGUAGE = 'language'\n\nvar Twitter = function (oauth) {\n  if(!(this instanceof Twitter)) {\n    return new Twitter(oauth)\n  }\n\n  if (!oauth || !oauth.consumer_secret || !oauth.consumer_key || !oauth.token || !oauth.token_secret) {\n    throw new Error('Oauth credentials required')\n  }\n  this.oauth = oauth\n\n  this._filters = {\n    tracking: {},\n    location: {},\n    follow: {},\n    language: {}\n  }\n\n  this.backoffs()\n\n  Writable.call(this, {objectMode: true})\n}\n\nutil.inherits(Twitter, Writable)\n\n// Here so we can easily test this\nTwitter.prototype.twitterUrl = 'https://stream.twitter.com/1.1/statuses/filter.json'\n\nTwitter.prototype.timeoutInterval = 1000 * 90 // default twitter timeout is 90 seconds\n\n// Backup strategies based off twitter's guidelines\n//    See https://dev.twitter.com/docs/streaming-apis/connecting#Reconnecting\nTwitter.prototype.backoffs = function () {\n  // Network hiccup, try every 250 seconds\n  this.networkBackoff = backoff(0, 16 * 1000, function (x) { return x + 250 })\n  // Rate limited. Try exponetially starting at 5 seconds\n  this.httpBackoff = backoff(5 * 1000, 320 * 1000, function (x) { return x * 2 })\n  // Rate limited. Try exponetially starting at a minute\n  this.rateBackoff = backoff(60 * 1000, Infinity, function (x) { return x * 2 })\n}\n\nTwitter.prototype.addFilter = function (filter, keywords, reconnect) {\n  reconnect = typeof reconnect === 'undefined' || reconnect\n\n  if (!Array.isArray(keywords)) {\n    keywords = [keywords]\n  }\n\n  var addedNewKeyword = false\n  keywords.forEach((function (keyword) {\n    if (this._filters[filter][keyword]) {\n      this._filters[filter][keyword]++\n    } else {\n      this._filters[filter][keyword] = 1\n      this.stale = true\n      addedNewKeyword = true\n    }\n  }).bind(this))\n\n  if (reconnect && addedNewKeyword) {\n    this.reconnect()\n  }\n}\n\nTwitter.prototype.track = function (keyword, reconnect) {\n  this.addFilter(FILTER_TYPE_TRACKING, keyword, reconnect)\n}\n\nTwitter.prototype.trackMultiple = function (keywords, reconnect) {\n  this.addFilter(FILTER_TYPE_TRACKING, keywords, reconnect)\n}\n\nTwitter.prototype.location = function (location, reconnect) {\n  this.addFilter(FILTER_TYPE_LOCATION, location, reconnect)\n}\n\nTwitter.prototype.follow = function (follow, reconnect) {\n  this.addFilter(FILTER_TYPE_FOLLOW, follow, reconnect)\n}\n\nTwitter.prototype.language = function (lang, reconnect) {\n  this.addFilter(FILTER_TYPE_LANGUAGE, lang, reconnect)\n}\n\nTwitter.prototype.tracking = function () {\n  return Object.keys(this._filters[FILTER_TYPE_TRACKING])\n}\n\nTwitter.prototype.locations = function () {\n  return Object.keys(this._filters[FILTER_TYPE_LOCATION])\n}\n\nTwitter.prototype.following = function () {\n  return Object.keys(this._filters[FILTER_TYPE_FOLLOW]);\n}\n\nTwitter.prototype.languages = function () {\n  return Object.keys(this._filters[FILTER_TYPE_LANGUAGE]);\n}\n\nTwitter.prototype.reconnect = function () {\n  if (this.stale) {\n    if (this.stream) {\n      this.abort()\n    }\n    this.connect()\n  }\n}\n\nTwitter.prototype._write = function (data, encoding, done) {\n  if (data.text) {\n    this.emit('tweet', data)\n  } else if (data.delete) {\n    this.emit('delete', data.delete)\n  } else if (data.scrub_geo) {\n    this.emit('scrub_geo', data.scrub_geo)\n  } else if (data.limit) {\n    this.emit('limit', data.limit)\n  } else if (data.status_withheld) {\n    this.emit('status_withheld', data.status_withheld)\n  } else if (data.user_withheld) {\n    this.emit('user_withheld', data.user_withheld)\n  } else if (data.disconnect) {\n    this.emit('disconnect', data.disconnect)\n  } else if (data.warning) {\n    this.emit('warning', data.warning)\n  }\n  done()\n}\n\nTwitter.prototype.removeFilter = function (filter, keyword, reconnect) {\n  reconnect = typeof reconnect === 'undefined' || reconnect\n\n  if (typeof this._filters[filter][keyword] === 'undefined') {\n    return\n  }\n  if (--this._filters[filter][keyword] === 0) {\n    delete this._filters[filter][keyword]\n    this.stale = true\n    if (reconnect) {\n      this.reconnect()\n    }\n  }\n}\n\nTwitter.prototype.removeAllFilters = function (filter, reconnect) {\n  reconnect = typeof reconnect === 'undefined' || reconnect\n\n  if (typeof this._filters[filter] === 'undefined') {\n    return\n  }\n  this._filters[filter] = {};\n  this.stale = true\n  if (reconnect) {\n    this.reconnect()\n  }\n}\n\nTwitter.prototype.untrack = function (keyword, reconnect) {\n  this.removeFilter(FILTER_TYPE_TRACKING, keyword, reconnect)\n}\n\nTwitter.prototype.untrackAll = function (reconnect) {\n  this.removeAllFilters(FILTER_TYPE_TRACKING, reconnect)\n}\n\nTwitter.prototype.unlocate = function (location, reconnect) {\n  this.removeFilter(FILTER_TYPE_LOCATION, location, reconnect)\n}\n\nTwitter.prototype.unfollow = function (follow, reconnect) {\n  this.removeFilter(FILTER_TYPE_FOLLOW, follow, reconnect)\n}\n\nTwitter.prototype.unlanguage = function (language, reconnect) {\n  this.removeFilter(FILTER_TYPE_LANGUAGE, language, reconnect)\n}\n\nTwitter.prototype.hasFilters = function () {\n  return this.tracking().length > 0 || this.locations().length > 0 || this.following().length > 0 || this.languages().length > 0\n}\n\nTwitter.prototype.errorExplanation = {\n  401: {\n    type: 'unauthorized',\n    long: 'HTTP authentication failed.'\n  },\n  403: {\n    type: 'forbidden',\n    long: 'The connecting account is not permitted to access this endpoint.'\n  },\n  404: {\n    type: 'not-found',\n    long: 'There is nothing at this URL.'\n  },\n  406: {\n    type: 'not-acceptable',\n    long: 'At least one request parameter is invalid.'\n  },\n  413: {\n    type: 'too-long',\n    long: 'A parameter list is too long.'\n  },\n  416: {\n    type: 'range-unacceptable',\n    long: 'Returned if user does not have access to use the count parameter or a count parameter is outside of the max/min allowable values.'\n  },\n  420: {\n    type: 'rate-limit',\n    long: 'The client has connected too frequently.'\n  },\n  503: {\n    type: 'service-unavailable',\n    long: 'A streaming server is temporarily overloaded.'\n  }\n}\n\nTwitter.prototype.connect = function () {\n  this.stale = false\n  if (!this.hasFilters()) {\n    return\n  }\n\n  this.stream = request.post({\n    url: this.twitterUrl,\n    oauth: this.oauth,\n    form: {\n      track: Object.keys(this._filters[FILTER_TYPE_TRACKING]).join(','),\n      locations: Object.keys(this._filters[FILTER_TYPE_LOCATION]).join(','),\n      follow: Object.keys(this._filters[FILTER_TYPE_FOLLOW]).join(','),\n      language: Object.keys(this._filters[FILTER_TYPE_LANGUAGE]).join(',')\n    }\n  })\n\n  this.once('error', function (err) {\n    console.log('Encountered an unrecoverable error, the stream is abort.')\n    console.log('  Reason: [', err.code, ']', err.explain.long)\n    console.log('  Please refer to https://dev.twitter.com/streaming/overview/connecting to debug your request parameters.')\n  })\n\n  this.stream.on('response', (function (res) {\n    var self = this\n    // Rate limited or temporarily unavailable\n    if (res.statusCode === 420 || res.statusCode === 503) {\n      var backoff = res.statusCode === 420 ? this.rateBackoff() : this.httpBackoff();\n      this.abort()\n      setTimeout(function () {\n        self.connect()\n      }, backoff)\n\n      this.emit('reconnect', {\n        type: this.errorExplanation[res.statusCode].type,\n        explain: this.errorExplanation[res.statusCode]\n      })\n      return\n    }\n\n    // Http error\n    if (res.statusCode > 200) {\n      this.abort()\n\n      this.emit('error', {\n        type: 'http',\n        err: new Error('Twitter connection error ' + res.statusCode),\n        code: res.statusCode,\n        explain: this.errorExplanation[res.statusCode]\n      })\n      return\n    }\n\n    // 200. Alive and well.\n    this.backoffs()\n\n    this.emit('connect')\n\n    this.parser = split(null, function (d) {\n      try {\n        return JSON.parse(d)\n      } catch (e) {}\n    })\n\n    this.parser = res.pipe(this.parser, {end: false})\n    this.parser.pipe(this)\n\n    // Handle this: https://dev.twitter.com/docs/streaming-apis/connecting#Stalls\n    // Abort the connection and reconnect if we haven't received an update for 90 seconds\n    var close = (function () {\n      this.abort()\n      process.nextTick(this.connect.bind(this))\n      this.emit('reconnect', {type: 'stall'})\n    }).bind(this)\n\n    this.timeout = setTimeout(close, this.timeoutInterval)\n\n    res.on('data', function () {\n      clearTimeout(self.timeout)\n      self.timeout = setTimeout(close, self.timeoutInterval)\n    })\n  }).bind(this))\n\n  this.stream.on('error', (function (err) {\n    var self = this\n    this.abort()\n    this.emit('reconnect', {type: 'network', err: err})\n    setTimeout(function () {\n      self.connect()\n    }, this.networkBackoff())\n  }).bind(this))\n}\n\nTwitter.prototype.abort = function () {\n  if (this.parser) {\n    this.parser.destroy()\n  }\n  clearTimeout(this.timeout)\n  if (this.stream) {\n    this.stream.abort()\n  }\n\n  this.stream = null\n}\n\nmodule.exports = Twitter\n"}